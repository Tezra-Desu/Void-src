Common subdirectories: nsxiv-30/.github and patch-nsxiv-30/.github
Common subdirectories: nsxiv-30/examples and patch-nsxiv-30/examples
Common subdirectories: nsxiv-30/icon and patch-nsxiv-30/icon
diff -Np1 nsxiv-30/image.c patch-nsxiv-30/image.c
*** nsxiv-30/image.c	2022-06-15 10:07:46.000000000 -0400
--- patch-nsxiv-30/image.c	2023-01-19 16:00:15.731495369 -0500
*************** static bool img_fit(img_t *img)
*** 555,556 ****
--- 555,625 ----
  
+ void render_core(win_t* win, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh,
+                  bool alpha)
+ {
+ 	Imlib_Image im, bg, bbg;
+ 	Imlib_Color_Modifier cmod;
+ 	XColor c;
+ 
+ 	if (imlib_image_has_alpha()) {
+ 		im = imlib_context_get_image();
+ 		cmod = imlib_context_get_color_modifier();
+ 		if ((bg = imlib_create_image(dw, dh)) == NULL)
+ 			error(EXIT_FAILURE, ENOMEM, NULL);
+ 		imlib_context_set_image(bg);
+ 		imlib_image_set_has_alpha(1);
+ 
+ 		if (alpha) {
+ 			int i, c, r;
+ 			DATA32 col[2] = { 0xFF666666, 0xFF999999 };
+ 			DATA32 * data = imlib_image_get_data();
+ 
+ 			for (r = 0; r < dh; r++) {
+ 				i = r * dw;
+ 				if (r == 0 || r == 8) {
+ 					for (c = 0; c < dw; c++)
+ 						data[i++] = col[!(c & 8) ^ !r];
+ 				} else {
+ 					memcpy(&data[i], &data[(r & 8) * dw], dw * sizeof(data[0]));
+ 				}
+ 			}
+ 			imlib_image_put_back_data(data);
+ 		} else {
+ 			imlib_image_clear();
+ 			c = win->win_bg_postmul;
+ 			imlib_context_set_color(c.red >> 8, c.green >> 8, c.blue >> 8,
+ 			                        win->win_alpha);
+ 			imlib_image_fill_rectangle(0, 0, dw, dh);
+ 		}
+ 
+ 		imlib_blend_image_onto_image(im, 1, sx, sy, sw, sh, 0, 0, dw, dh);
+ 		imlib_context_set_color_modifier(NULL);
+ 
+ 		if (!alpha && win->win_alpha < 0xFF) {
+ 			/* blend onto black to get premultiplied alpha */
+ 			if ((bbg = imlib_create_image(dw, dh)) == NULL)
+ 				error(EXIT_FAILURE, ENOMEM, NULL);
+ 			imlib_context_set_image(bbg);
+ 			imlib_image_set_has_alpha(1);
+ 			imlib_context_set_color(0, 0, 0, 0xFF);
+ 			imlib_image_fill_rectangle(0, 0, dw, dh);
+ 			imlib_blend_image_onto_image(bg, 1, 0, 0, dw, dh, 0, 0, dw, dh);
+ 			imlib_image_copy_alpha_to_image(bg, 0, 0);
+ 			imlib_context_set_image(bg);
+ 			imlib_free_image();
+ 			imlib_context_set_image(bbg);
+ 		}
+ 
+ 		imlib_context_set_blend(0);
+ 		imlib_render_image_on_drawable(dx, dy);
+ 		imlib_context_set_blend(1);
+ 		imlib_free_image();
+ 		imlib_context_set_color_modifier(cmod);
+ 	} else {
+ 		imlib_image_set_has_alpha(1);
+ 		imlib_context_set_blend(0);
+ 		imlib_render_image_part_on_drawable_at_size(sx, sy, sw, sh, dx, dy, dw, dh);
+ 		imlib_context_set_blend(1);
+ 	}
+ }
+ 
  void img_render(img_t *img)
*************** void img_render(img_t *img)
*** 560,562 ****
  	int dx, dy, dw, dh;
- 	Imlib_Image bg;
  
--- 629,630 ----
*************** void img_render(img_t *img)
*** 609,647 ****
  	 */
! 	if (imlib_image_has_alpha()) {
! 		if ((bg = imlib_create_image(dw, dh)) == NULL) {
! 			error(0, ENOMEM, "Failed to create image");
! 			goto fallback;
! 		}
! 		imlib_context_set_image(bg);
! 		imlib_image_set_has_alpha(0);
! 
! 		if (img->alpha) {
! 			int i, c, r;
! 			DATA32 col[2] = { 0xFF666666, 0xFF999999 };
! 			DATA32 * data = imlib_image_get_data();
! 
! 			for (r = 0; r < dh; r++) {
! 				i = r * dw;
! 				if (r == 0 || r == 8) {
! 					for (c = 0; c < dw; c++)
! 						data[i++] = col[!(c & 8) ^ !r];
! 				} else {
! 					memcpy(&data[i], &data[(r & 8) * dw], dw * sizeof(data[0]));
! 				}
! 			}
! 			imlib_image_put_back_data(data);
! 		} else {
! 			XColor c = win->win_bg;
! 			imlib_context_set_color(c.red >> 8, c.green >> 8, c.blue >> 8, 0xFF);
! 			imlib_image_fill_rectangle(0, 0, dw, dh);
! 		}
! 		imlib_blend_image_onto_image(img->im, 0, sx, sy, sw, sh, 0, 0, dw, dh);
! 		imlib_context_set_color_modifier(NULL);
! 		imlib_render_image_on_drawable(dx, dy);
! 		imlib_free_image();
! 		imlib_context_set_color_modifier(img->cmod);
! 	} else {
! fallback:
! 		imlib_render_image_part_on_drawable_at_size(sx, sy, sw, sh, dx, dy, dw, dh);
! 	}
  	img->dirty = false;
--- 677,679 ----
  	 */
! 	render_core(win, sx, sy, sw, sh, dx, dy, dw, dh, img->alpha);
  	img->dirty = false;
diff -Np1 nsxiv-30/nsxiv.h patch-nsxiv-30/nsxiv.h
*** nsxiv-30/nsxiv.h	2022-06-15 10:07:46.000000000 -0400
--- patch-nsxiv-30/nsxiv.h	2023-01-19 16:00:15.731495369 -0500
*************** bool img_frame_navigate(img_t*, int);
*** 228,229 ****
--- 228,230 ----
  bool img_frame_animate(img_t*);
+ void render_core(win_t*, int, int, int, int, int, int, int, int, bool);
  Imlib_Image img_open(const fileinfo_t*);
*************** struct win {
*** 401,405 ****
  
! 	XColor win_bg;
  	XColor win_fg;
  	XColor mrk_fg;
  #if HAVE_LIBFONTS
--- 402,408 ----
  
! 	XColor win_bg; /* pre-multiplied alpha */
! 	XColor win_bg_postmul; /* post-multiplied alpha */
  	XColor win_fg;
  	XColor mrk_fg;
+ 	unsigned int win_alpha;
  #if HAVE_LIBFONTS
diff -Np1 nsxiv-30/thumbs.c patch-nsxiv-30/thumbs.c
*** nsxiv-30/thumbs.c	2022-06-15 10:07:46.000000000 -0400
--- patch-nsxiv-30/thumbs.c	2023-01-19 16:00:15.731495369 -0500
*************** void tns_render(tns_t *tns)
*** 446,448 ****
  			imlib_context_set_image(t->im);
! 			imlib_render_image_on_drawable_at_size(t->x, t->y, t->w, t->h);
  			if (tns->files[i].flags & FF_MARK)
--- 446,448 ----
  			imlib_context_set_image(t->im);
! 			render_core(win, 0, 0, t->w, t->h, t->x, t->y, t->w, t->h, false);
  			if (tns->files[i].flags & FF_MARK)
diff -Np1 nsxiv-30/window.c patch-nsxiv-30/window.c
*** nsxiv-30/window.c	2022-06-15 10:07:46.000000000 -0400
--- patch-nsxiv-30/window.c	2023-01-19 16:05:18.913354884 -0500
*************** void win_init(win_t *win)
*** 107,111 ****
  	win_env_t *e;
! 	const char *win_bg, *win_fg, *mrk_fg;
  	char *res_man;
  	XrmDatabase db;
  #if HAVE_LIBFONTS
--- 107,114 ----
  	win_env_t *e;
! 	const char *win_bg, *win_fg, *mrk_fg, *win_alpha;
  	char *res_man;
  	XrmDatabase db;
+ 	XVisualInfo vis;
+ 	float alpha;
+ 	char *endptr;
  #if HAVE_LIBFONTS
*************** void win_init(win_t *win)
*** 125,129 ****
  	e->scrh = DisplayHeight(e->dpy, e->scr);
! 	e->depth = DefaultDepth(e->dpy, e->scr);
! 	e->vis = DefaultVisual(e->dpy, e->scr);
! 	e->cmap = DefaultColormap(e->dpy, e->scr);
  
--- 128,139 ----
  	e->scrh = DisplayHeight(e->dpy, e->scr);
! 
! 	if (XMatchVisualInfo(e->dpy, e->scr, 32, TrueColor, &vis)) {
! 		e->depth = 32;
! 		e->vis = vis.visual;
! 		e->cmap = XCreateColormap(e->dpy, DefaultRootWindow(e->dpy), e->vis, None);
! 	} else {
! 		e->depth = DefaultDepth(e->dpy, e->scr);
! 		e->vis = DefaultVisual(e->dpy, e->scr);
! 		e->cmap = DefaultColormap(e->dpy, e->scr);
! 	}
  
*************** void win_init(win_t *win)
*** 143,144 ****
--- 153,173 ----
  
+ 	/* apply alpha */
+ 	win->win_bg_postmul = win->win_bg;
+ 	win_alpha = win_res(db, RES_CLASS ".window.alpha", "1.0");
+ 	alpha = strtof(win_alpha, &endptr);
+ 	if (!(*endptr == '\0' && alpha >= 0.0 && alpha <= 1.0))
+ 		error(EXIT_FAILURE, 0, "Error parsing alpha");
+ 	win->win_alpha = 0xFF;
+ 	if (e->depth == 32 && alpha < 1.0) {
+ 		win->win_alpha *= alpha;
+ 		win->win_bg.red *= alpha;
+ 		win->win_bg.green *= alpha;
+ 		win->win_bg.blue *= alpha;
+ 		win->win_bg.pixel =
+ 			(((unsigned long) win->win_bg.blue  >> 8) <<  0) |
+ 			(((unsigned long) win->win_bg.green >> 8) <<  8) |
+ 			(((unsigned long) win->win_bg.red   >> 8) << 16) |
+ 			(((unsigned long) win->win_alpha        ) << 24);
+ 	}
+ 
  #if HAVE_LIBFONTS
